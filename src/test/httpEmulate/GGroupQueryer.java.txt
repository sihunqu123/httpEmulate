package test.httpEmulate;

import java.io.*;
import java.security.cert.CertificateException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.zip.GZIPInputStream;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.params.ConnRoutePNames;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import util.commonUtil.ComFileUtil;
import util.commonUtil.ComLogUtil;
import util.commonUtil.ComRegexUtil;
import util.commonUtil.ComStrUtil;

abstract public class GGroupQueryer {
	
    public static String encode = "utf-8";
    private static Properties configprops = new Properties();
    private static String host;
    //private static int port = 1080;
    private static int port = 80;
    private static HttpHost proxy;
    private static String GGroupName;
    private static String[] highFreTerms;
    private File outputFile;
    
    private Random randGen = new Random();
    
    private HttpClient httpclient = null;
	
    private CookieStore cookieStore = null;
    
	
    private Map<String, String> map = new HashMap<String, String>();
	
	
    public GGroupQueryer() {
		super();
		init();
    }
    
    /**
     * the interface to query googleGroup
     * @param query
     * @throws Exception
     */
    public void query(String query) throws Exception {
    	List<String> resList = this.searchGGroupFinal(query);
    }
    
    private void init() {
    	Properties p = new Properties();
        try {
        	p.load(new FileInputStream("config.properties"));
        	configprops.load(new FileInputStream(p.getProperty("httpEmulateConfig")));
        	host = configprops.getProperty("host");
        	port = Integer.parseInt(configprops.getProperty("port"));
        	proxy = new HttpHost(host, port);
        	GGroupName = configprops.getProperty("ggroupname");
        	highFreTerms = ComFileUtil.readFile2String(new File(configprops.getProperty("highFrequenceTermsLoc"))).split("(\r\n|\n\r|\r|\n)+");
        	outputFile = new File(configprops.getProperty("queryResultOutput"));
    		this.httpclient = new DefaultHttpClient();
            enableSSL(httpclient);
            setHttpClientProxy(httpclient);
            cookieStore = ((AbstractHttpClient) httpclient).getCookieStore();
			login();
			System.out.println("------------------------------------------initOver----------------------------------------------");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    /**
     * login and init some parameter and cookie
     * @throws Exception
     */
    private void login() throws Exception {
    	step0();
		Thread.sleep(1000 * (1 + randGen.nextInt(2)));
		step1();
		Thread.sleep(1000 * (1 + randGen.nextInt(3)));
		step2();
		Thread.sleep(1000 * (1 + randGen.nextInt(3)));
		step3();
		Thread.sleep(1000 * (1 + randGen.nextInt(3)));
		myGroup();
    }
	
    /**
     * use proxy to access google
     * @param httpclient
     */
	public static void setHttpClientProxy(HttpClient httpclient) {
		httpclient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
	}
	
	/**
	 * accept all https host
	 * @param httpclient
	 */
	private static void enableSSL(HttpClient httpclient) {
		// 调用ssl
		try {
			SSLContext sslcontext = SSLContext.getInstance("TLS");
			sslcontext.init(null, new TrustManager[] { truseAllManager }, null);
			SSLSocketFactory sf = new SSLSocketFactory(sslcontext);
			sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			Scheme https = new Scheme("https", sf, 443);
			httpclient.getConnectionManager().getSchemeRegistry().register(https);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * override validate method to trust all cer
	 */
	private static TrustManager truseAllManager = new X509TrustManager() {

		public void checkClientTrusted(
				java.security.cert.X509Certificate[] arg0, String arg1)
				throws CertificateException {
			// TODO Auto-generated method stub

		}

		public void checkServerTrusted(
				java.security.cert.X509Certificate[] arg0, String arg1)
				throws CertificateException {
			// TODO Auto-generated method stub

		}

		public java.security.cert.X509Certificate[] getAcceptedIssuers() {
			// TODO Auto-generated method stub
			return null;
		}

	};
	
	
	/**
	 * decode  gzip stream
	 * @param is
	 * @return decoded string
	 * @throws IOException
	 */
	public static String decodeGzipStream(InputStream is) throws IOException {
		GZIPInputStream gzin;
        gzin = new GZIPInputStream(is);
        
        InputStreamReader isr = new InputStreamReader(gzin, encode);
        java.io.BufferedReader br = new java.io.BufferedReader(isr);
        StringBuffer sb = new StringBuffer();
        String tempbf;
        while ((tempbf = br.readLine()) != null) {  
            sb.append(tempbf);
            sb.append("\r\n");
        }
        isr.close();
        gzin.close();
        //System.out.println(sb);
        return sb.toString();
	}
	
	/**
	 * get content String from entity
	 * @param entity
	 * @return content String
	 * @throws Exception
	 */
	public static String getContentStr(HttpEntity entity) throws Exception {
		String contentEncoding = "" + entity.getContentEncoding();
		//if it is gzip format
		if(contentEncoding.toLowerCase().indexOf("gzip") > -1) {
//			ComLogUtil.info("gzip format");
			return decodeGzipStream(entity.getContent());
		}
//		ComLogUtil.info("none gzip format " + contentEncoding + "   | " + entity.getContentType().getName() + "  | " + entity.getContentType().getValue());
		return EntityUtils.toString(entity, encode);
	}
	
	/**
	 * get resList from result string
	 * @param resStr
	 * @return
	 */
	private static List<String> getResList(String resStr) {
		System.out.println("original:\n");
		System.out.println(resStr);
		String arrStr = resStr.substring(resStr.indexOf("[", 6) + 2, resStr.length() - 7);
		List<String> str2List = ComStrUtil.str2List(arrStr, "\",\"");
		List<String> resList = new ArrayList<String>();
		int size = str2List.size();
		int i = 0;
		for(i = 0; i < size; i++) {
			try {
				if(ComStrUtil.isBlankOrNull(ComRegexUtil.getMatchedString(str2List.get(i), "^(\\w|-){2,5}\\.\\d{5}$"))) {
					ComLogUtil.error(str2List.get(i) + " not matched");
				} else {
					resList.add(str2List.get(i));
				}
			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}
		ComLogUtil.printList(resList, "");
		str2List = null;
		return resList;
	}
	
	/**
	 * construct a cookie string for header
	 */
	private String getAllCookieStr() {
		List<Cookie> cookies = cookieStore.getCookies();
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < cookies.size(); i++) {
			if(i > 0) sb.append("; "); 
			sb.append(cookies.get(i).getName()).append("=").append(cookies.get(i).getValue());
		}
		ComLogUtil.info("cookieStr:" + sb.toString());
		return sb.toString();
	}
	
	/**
	 * construct a cookie string for payload
     */
	private String getAllCookie4Payload() {
	    List<Cookie> cookies = cookieStore.getCookies();
	    StringBuilder sb = new StringBuilder();
	    for(int i = 0; i < cookies.size(); i++) {
	    	sb.append("&").append(cookies.get(i).getName()).append("=").append(cookies.get(i).getValue());
	    }
	    ComLogUtil.info("cookieStr4Payload:" + sb.toString());
	    return sb.toString();
	}
	    
	/**
	 * print all cookie stored in httpClient
	 */
	private void printAllCookie(String grepMark) {
		ComLogUtil.printList(cookieStore.getCookies(), grepMark);
	}
	
	/**
	 * do Login
	 */
	private void step3() throws Exception {
		ComLogUtil.info("step3");
		HttpPost httpPost = new HttpPost("https://accounts.google.com/signin/challenge/sl/password");
		StringBuilder payloadStr = new StringBuilder("Page=PasswordSeparationSignIn")
										.append(getAllCookie4Payload())
										.append("&continue=https%3A%2F%2Fwww.google.com.au%2F%3Fgws_rd%3Dssl")
										.append("&hl=zh-CN")
										.append("&gxf=").append(map.get("gxf"))
										.append("&continue=").append(map.get("continue"))
										.append("&bgresponse=").append(map.get("bgresponse"))
										.append("&_utf8=%E2%98%83")
										.append("&pstMsg=1")
										.append("&dnConn=")
										.append("&checkConnection=youtube%3A1392%3A1")
										.append("&checkedDomains=youtube")
										.append("&identifiertoken=")
										.append("&identifiertoken_audio=")
										.append("&identifier-captcha-input=")
										.append("&Email=yingdachu%40gmail.com")
										.append("&Passwd=PASSW0RD")
										.append("&PersistentCookie=yes")
										.append("&rmShown=1")
										.append("&ProfileInformation=").append(map.get("encoded_profile_information"));
        
        httpPost.addHeader("Host", "accounts.google.com");
        httpPost.addHeader("Connection", "keep-alive");
        httpPost.addHeader("Cache-Control", "max-age=0");
        httpPost.addHeader("Origin", "https://accounts.google.com");
        httpPost.addHeader("Upgrade-Insecure-Requests", "1");
        httpPost.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpPost.addHeader("Content-Type", "application/x-www-form-urlencoded");
//        httpPost.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
//        httpPost.addHeader("X-Chrome-Connected", "id=113692410776860057358,mode=0,enable_account_consistency=false");
        httpPost.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpPost.addHeader("Referer", "https://accounts.google.com/ServiceLogin?hl=zh-CN&passive=true&continue=https://www.google.com.au/%3Fgws_rd%3Dssl");
        httpPost.addHeader("Accept-Encoding", "gzip, deflate, br");
        httpPost.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        //httpPost.addHeader("Cookie", "NID=85=oP90_EDMeGUAP3zhfuAoOIIap2F9paMau2ejGmUoFUcfglslfn3MKcrEMhCOUUS-nQgXfxsw2mEZOnXzavkbMx4tQRx4HFYhVNSHK6m8u7b-uRZxGunI4DUWprX1vfoH; GALX=7jI_jfAtnJk; GAPS=1");
        httpPost.addHeader("Cookie", getAllCookieStr());

        ComLogUtil.info("payloadStr:" + payloadStr);
        httpPost.setEntity(new StringEntity(payloadStr.toString()));
        
        HttpResponse response = httpclient.execute(httpPost);
		ComLogUtil.error("statusCode:" + response.getStatusLine().getStatusCode());
        
        HttpEntity entity = response.getEntity();
		org.apache.http.Header contentType = entity.getContentType();
		ComLogUtil.info(new StringBuilder("ContentEncoding:").append(entity.getContentEncoding())
							.append(", ContentType:").append(contentType.getName()).append("  ").append(contentType.getValue()));
        
//        ComLogUtil.info("html:\n" + getContentStr(entity));
        ComFileUtil.writeString2File(getContentStr(entity), new File("bin/step3.txt"), encode);
        httpPost.releaseConnection();
        printAllCookie("step3Cookie:");
        if(cookieStore.getCookies().size() > 9) {
        	ComLogUtil.info("Login successfully!!!!!!!!!!!!!!!!");
        } else {
        	ComLogUtil.info("Login Failed!!!!!!!!!!!!!!!!");
        }
        
        
	}
	
	/**
	 * get account Info
	 */
	private void step2() throws Exception {
		ComLogUtil.info("");
        HttpPost httpPost = new HttpPost("https://accounts.google.com/accountLoginInfoXhr");
        StringBuilder payloadStr = new StringBuilder("Email=yingdachu%40gmail.com")
								.append(getAllCookie4Payload())
								.append("&GALX=").append(map.get("GALX"))
								.append("&gxf=").append(map.get("gxf"))
								.append("&continue=").append(map.get("continue"))
								.append("&bgresponse=").append(map.get("bgresponse"))
								.append("&continue=https%3A%2F%2Fwww.google.com.au%2F%3Fgws_rd%3Dssl")
								.append("&hl=zh-CN")
								.append("&_utf8=%E2%98%83")
								.append("&pstMsg=1")
								.append("&dnConn=")
								.append("&checkConnection=youtube%3A1392%3A1")
								.append("&checkedDomains=youtube")
								.append("&identifiertoken=")
								.append("&identifiertoken_audio=")
								.append("&identifier-captcha-input=")
								.append("&Passwd=PASSW0RD")
								.append("&PersistentCookie=yes")
								.append("&rmShown=1")
								.append("&Page=PasswordSeparationSignIn")
								.append("&requestlocation=https%3A%2F%2Faccounts.google.com%2FServiceLogin%3Fhl%3Dzh-CN%26passive%3Dtrue%26continue%3Dhttps%3A%2F%2Fwww.google.com.au%2F%253Fgws_rd%253Dssl%23identifier");
        
        httpPost.addHeader("Host", "accounts.google.com");
        httpPost.addHeader("Connection", "keep-alive");
        httpPost.addHeader("Origin", "https://accounts.google.com");
        httpPost.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpPost.addHeader("Content-type", "application/x-www-form-urlencoded");
        httpPost.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpPost.addHeader("X-Chrome-Connected", "id=113692410776860057358,mode=0,enable_account_consistency=false");
        httpPost.addHeader("Accept", "*/*");
        httpPost.addHeader("Referer", "https://accounts.google.com/ServiceLogin?hl=zh-CN&passive=true&continue=https://www.google.com.au/%3Fgws_rd%3Dssl");
        httpPost.addHeader("Accept-Encoding", "gzip, deflate, br");
        httpPost.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        httpPost.addHeader("Cookie", getAllCookieStr());
        
        ComLogUtil.info("payloadStr:" + payloadStr);
        httpPost.setEntity(new StringEntity(payloadStr.toString()));
        
        HttpResponse response = httpclient.execute(httpPost);
		ComLogUtil.info("statusCode:" + response.getStatusLine().getStatusCode());
        
        HttpEntity entity = response.getEntity();
		org.apache.http.Header contentType = entity.getContentType();
		ComLogUtil.info(new StringBuilder("ContentEncoding:").append(entity.getContentEncoding())
							.append(", ContentType:").append(contentType.getName()).append("  ").append(contentType.getValue()));
        
		String resStr = getContentStr(entity);
//        ComLogUtil.info("resStr:\n" + resStr);
        ComFileUtil.writeString2File(resStr, new File("bin/step2.txt"), resStr);
        
        //store some info for later http request use.
        JSONObject jsonObject = new org.json.JSONObject(resStr);
        map.put("encoded_profile_information", jsonObject.getString("encoded_profile_information"));
        System.out.println(jsonObject.get("encoded_profile_information"));
        
        httpPost.releaseConnection();
        printAllCookie("step2Cookie:");
        System.out.println("-----------------------------------------------------------");
        
	}
	
	/**
	 * init login page
	 */
	private void step1() throws Exception {
		ComLogUtil.info("");
        HttpGet httpGet = new HttpGet("https://accounts.google.com/ServiceLogin?hl=zh-CN&passive=true&continue=https://www.google.com.au/%3Fgws_rd%3Dssl");
        httpGet.addHeader("Host", "accounts.google.com");
        httpGet.addHeader("Connection", "keep-alive");
        httpGet.addHeader("Upgrade-Insecure-Requests", "1");
        httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpGet.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpGet.addHeader("X-Chrome-Connected", "id=113692410776860057358,mode=0,enable_account_consistency=false");
        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpGet.addHeader("Referer", "https://www.google.com.au/");
        httpGet.addHeader("Accept-Encoding", "gzip, deflate, sdch, br");
        httpGet.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");

        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
        String html = getContentStr(entity);
        
        httpGet.releaseConnection();
        
//        System.out.println(html);
        ComFileUtil.writeString2File(html, new File("bin/step1.txt"), encode);
        //store some info for later http request use.
        Document doc = Jsoup.parse(html);
		Elements allElements = doc.getElementsByTag("input");
		//ComLogUtil.info(allElements.select("input[name=GALX]").get(0).attr("value"));
		map.put("GALX", allElements.select("input[name=GALX]").get(0).attr("value"));
		map.put("gxf", allElements.select("input[name=gxf]").get(0).attr("value"));
		map.put("continue", allElements.select("input[name=continue]").get(0).attr("value"));
		map.put("hl", allElements.select("input[name=hl]").get(0).attr("value"));
		map.put("_utf8", allElements.select("input[name=_utf8]").get(0).attr("value"));
		map.put("bgresponse", allElements.select("input[name=bgresponse]").get(0).attr("value"));	//js_disabled
        printAllCookie("cookie");
        System.out.println("-----------------------------------------------------------");
	}
	
	/**
	 * launch google homepage to start emulate
	 */
	private void step0() throws Exception {
		ComLogUtil.info("");
        HttpGet httpGet = new HttpGet("https://www.google.com.au/");
        
        httpGet.addHeader("Host", "www.google.com.au");
        httpGet.addHeader("Connection", "keep-alive");
        httpGet.addHeader("Upgrade-Insecure-Requests", "1");
        httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpGet.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpGet.addHeader("Accept-Encoding", "gzip, deflate, sdch, br");
        httpGet.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        httpGet.addHeader("Cookie", getAllCookieStr());
        
        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
        
        String html = getContentStr(entity);
        httpGet.releaseConnection();
//        System.out.println(html);
        ComFileUtil.writeString2File(html, new File("bin/step0.txt"), encode);
        
        printAllCookie("Cookie:");
        System.out.println("-----------------------------------------------------------");
	}
	
	/**
	 *  launch googleForm hompage
	 */
	private void myGroup() throws Exception {
		ComLogUtil.info("");
        HttpGet httpGet = new HttpGet("https://groups.google.com/forum/");
        
        httpGet.addHeader("Connection", "keep-alive");
        httpGet.addHeader("Upgrade-Insecure-Requests", "1");
        httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpGet.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpGet.addHeader("Accept-Encoding", "gzip, deflate, sdch, br");
        httpGet.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        httpGet.addHeader("Cookie", getAllCookieStr());
        
        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
        
        String html = getContentStr(entity);
        httpGet.releaseConnection();
        //ComLogUtil.info("html:\n");
        //System.out.println(html);
        ComFileUtil.writeString2File(html, new File("bin/myGroup.txt"), encode);
        
        //store some info for later http request use.
        String tmpStr1 = ComRegexUtil.getMatchedString(html, "(?<=src=\"/forum/)(\\w|-)(?=\\.cache\\.js)");
        String tmpStr2 = ComRegexUtil.getMatchedString(html, "(?<=\"xsrf-token\":\")(\\w|-){34}:\\d{13}(?=\",)");
        map.put("X-GWT-Permutation", tmpStr1);
        map.put("xsrf-token", tmpStr2);
        if(ComStrUtil.isBlankOrNull(tmpStr1)) {
        	ComLogUtil.error("X-GWT-Permutation:" + tmpStr1);
        }
        if(ComStrUtil.isBlankOrNull(tmpStr2)) {
        	ComLogUtil.error("xsrf-token:" + tmpStr2);
        }
        
        printAllCookie("Cookie:");
        System.out.println("-----------------------------------------------------------");
	}
	
	public static void main(String[] args) {
//		GGroupQueryer ggq = new GGroupQueryer();
//		ggq.generateQueryResult();
		
	}
	
	/**
	 * generate a result json file from input high frequence terms.
	 */
	public void generateQueryResult() {
		FileWriter fw = null;
		try {
			/** */
			int length = highFreTerms.length;
			int i = 0;
			fw = new FileWriter(outputFile, true);
			StringBuilder sb = new StringBuilder();
			JSONObject jo = new JSONObject();
//			new org.json.JSONArray().p
			for(i = 0; i < length; i++) {
				ComLogUtil.info("start to query:" + highFreTerms[i]);
				jo.put(highFreTerms[i], searchGGroupFinal(highFreTerms[i]));
				//System.out.println(jo.toString());
				sb.append(jo.toString());
				//fw.write(jo.toString());
				Thread.sleep(1000 * randGen.nextInt(3));
			}
			ComLogUtil.info("res:" + sb);
			fw.write(jo.toString());
			fw.flush();
			fw.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			 try {
				if(fw != null) {
					fw.close();
					fw = null;
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			 
		}
		
	}
	
	/**
	 * after login, start search
	 */
	private List<String> searchGGroupFinal(String queryStr) throws Exception {
        List<String> resList = null;
        
        int currentPage = 0;	//start from 0
        int pageMax = 20;	//default 20
        
        resList = searchGGroupOnce(queryStr, pageMax, currentPage++);
        ComLogUtil.info("res:\n");
        ComLogUtil.printList(resList, "");
        return resList;
    }
	
	/**
	 * sometimes we may need to search "next page"
	 * @param queryStr the term to query. e.q:group:my-langtest going -> search going in group my-langtest
	 * @param pageMax the number of result that retrieve per page. default is 20
	 * @param currentPage start from 0
	 */
	private List<String> searchGGroupOnce(String queryStr, int pageMax, int currentPage) throws Exception {
		HttpResponse response = null;
        HttpEntity entity = null;
        HttpPost httpPost = null;
        String resStr = null;
        List<String> resList = null;
        String payload = new StringBuilder("7|3|12|https://groups.google.com/forum/|431EDF28DA7DB0F110D897C9D8624A20|5g|")
							.append(map.get("xsrf-token"))
							.append("|_|getMatchingMessages|5n|i|I|1u|5h|")
							.append(GGroupName).append(" ").append(queryStr)
							.append("|1|2|3|4|5|6|6|7|8|9|9|10|11|12|0|")
							.append(currentPage * pageMax).append('|').append(pageMax)
							.append("|0|0|")
							.toString();
        
		ComLogUtil.info(new StringBuilder("query:").append(queryStr)
						.append(", pageMax:").append(pageMax)
						.append(", currentPage:").append(currentPage)
		);
		httpPost = new HttpPost("https://groups.google.com/forum/fsearch?appversion=1&hl=en&authuser=0");
		httpPost.addHeader("Host", "groups.google.com");
		httpPost.addHeader("Connection", "keep-alive");
		httpPost.addHeader("Origin", "https://groups.google.com");
		httpPost.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
		httpPost.addHeader("Content-Type", "text/x-gwt-rpc; charset=UTF-8");
		httpPost.addHeader("X-GWT-Module-Base", "https://groups.google.com/forum/");
		httpPost.addHeader("X-GWT-Permutation", map.get("X-GWT-Permutation"));
		httpPost.addHeader("X-Groups-Group-Name", "my-langtest");
		httpPost.addHeader("X-Groups-Time-Zone", "3497301_24_24__24_");
		//httpPost.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
		httpPost.addHeader("Accept", "*/*");
		httpPost.addHeader("Referer", "https://groups.google.com/forum/");
		httpPost.addHeader("Accept-Encoding", "gzip, deflate, br");
		httpPost.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
		//httpPost.addHeader("Cookie", "SID=rgNe3bkNMSTkVfI0ChGVf8lVxDYAFvWBKUoiKcEw_cNq0A3n32ADpl_x3NrHNd0BKe75Kw.; HSID=AXiegm9wi9L7Onv4N; SSID=AVYhrlRe8i5UOVyQl; APISID=WweJHmMpXDk-Xt6A/AoEnGNgW32eUGZyBX; SAPISID=gwk-yXe8_IJ8BBz5/AlIDm1wdmi4HkD1yu; CONSENT=YES+JP.zh-CN+20160731-18-0; NID=85=Leg4h-tbPdEEmGPUbLIcCjrePiinyEHl_BWqZ9xlhYZDwS-REYAj0vhv4URh4sbfpYhgwtTnCeHHXt4yHXT6PJrTjQkmkvIhii5CiwGugtjLO9GDIt6QQ1gi0JfOaNwZZaNP2b2MqmxhtQ3mb7hbOqa4gGZuJIvthqp0hHfA6AlofeaOyQRNL7f8OSFXlbXIXL4f9qnpPg; groupsloginpref=aEiIwOuxfzdCmLZe4oB1JsBmCUxwG8x-u-HBCV9JT8E=yingdachu@gmail.com; __utmt_*groups_ga*=1; __utma=118165087.903042937.1472142077.1472142077.1472142077.1; __utmb=118165087.4.9.1472142115786; __utmc=118165087; __utmz=118165087.1472142077.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); S=cloudsearch=2stCm8aR5e1o2UZA47qJpA");
		httpPost.addHeader("Cookie", getAllCookieStr());

		ComLogUtil.info("payload:" + payload);
		
		//only english
		httpPost.setEntity(new StringEntity(payload, encode));
		
		response = httpclient.execute(httpPost);
		int statusCode = response.getStatusLine().getStatusCode();
		ComLogUtil.info("statusCode:" + response.getStatusLine().getStatusCode());
		if(statusCode != 200) {
			ComLogUtil.error("query failed!!!!");
		}
		
		entity = response.getEntity();
		
		resStr = decodeGzipStream(entity.getContent());
		
		org.apache.http.Header contentType = entity.getContentType();
		ComLogUtil.info(new StringBuilder("ContentEncoding:").append(entity.getContentEncoding())
							.append(", ContentType:").append(contentType.getName()).append("  ").append(contentType.getValue())
							.append(", Content:\n").append(resStr)
		);
		httpPost.releaseConnection();
		
		resList = getResList(resStr);
		
		//if we still have next page;
		if(resList.size() >= pageMax
				//&& currentPage < 10 // we need to retrieve all results.
				) {
			resList.addAll(searchGGroupOnce(queryStr, pageMax, ++currentPage));
		}
		System.out.println("-----------------------------------------------------------");
		return resList;
	}
	
	private List<String> searchGGroupOnceNoStem(String queryStr, int pageMax, int currentPage) throws Exception {
		HttpResponse response = null;
        HttpEntity entity = null;
        HttpPost httpPost = null;
        String resStr = null;
        List<String> resList = null;
        String payload = new StringBuilder("7|3|13|https://groups.google.com/forum/|431EDF28DA7DB0F110D897C9D8624A20|5g|")
							.append(map.get("xsrf-token"))
							.append("|_|getMatchingMessages|5n|i|I|1u|5h|")
							.append(queryStr)
							.append("|my-langtest|1|2|3|4|5|6|6|7|8|9|9|10|11|12|8|13|13|0|0|")
							.append(currentPage * pageMax)
							.append("|20|10|5|0|")
							.toString();
        
		ComLogUtil.info(new StringBuilder("query:").append(queryStr)
						.append(", pageMax:").append(pageMax)
						.append(", currentPage:").append(currentPage)
		);
		httpPost = new HttpPost("https://groups.google.com/forum/fsearch?appversion=1&hl=zh-CN");
		httpPost.addHeader("Host", "groups.google.com");
		httpPost.addHeader("Connection", "keep-alive");
		httpPost.addHeader("Origin", "https://groups.google.com");
		httpPost.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
		httpPost.addHeader("Content-Type", "text/x-gwt-rpc; charset=UTF-8");
		httpPost.addHeader("X-GWT-Module-Base", "https://groups.google.com/forum/");
		httpPost.addHeader("X-GWT-Permutation", map.get("X-GWT-Permutation"));
		httpPost.addHeader("X-Groups-Group-Name", "my-langtest");
		httpPost.addHeader("X-Groups-Time-Zone", "3497301_24_24__24_");
		//httpPost.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
		httpPost.addHeader("Accept", "*/*");
		httpPost.addHeader("Referer", "https://groups.google.com/forum/");
		httpPost.addHeader("Accept-Encoding", "gzip, deflate, br");
		httpPost.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
		//httpPost.addHeader("Cookie", "SID=rgNe3bkNMSTkVfI0ChGVf8lVxDYAFvWBKUoiKcEw_cNq0A3n32ADpl_x3NrHNd0BKe75Kw.; HSID=AXiegm9wi9L7Onv4N; SSID=AVYhrlRe8i5UOVyQl; APISID=WweJHmMpXDk-Xt6A/AoEnGNgW32eUGZyBX; SAPISID=gwk-yXe8_IJ8BBz5/AlIDm1wdmi4HkD1yu; CONSENT=YES+JP.zh-CN+20160731-18-0; NID=85=Leg4h-tbPdEEmGPUbLIcCjrePiinyEHl_BWqZ9xlhYZDwS-REYAj0vhv4URh4sbfpYhgwtTnCeHHXt4yHXT6PJrTjQkmkvIhii5CiwGugtjLO9GDIt6QQ1gi0JfOaNwZZaNP2b2MqmxhtQ3mb7hbOqa4gGZuJIvthqp0hHfA6AlofeaOyQRNL7f8OSFXlbXIXL4f9qnpPg; groupsloginpref=aEiIwOuxfzdCmLZe4oB1JsBmCUxwG8x-u-HBCV9JT8E=yingdachu@gmail.com; __utmt_*groups_ga*=1; __utma=118165087.903042937.1472142077.1472142077.1472142077.1; __utmb=118165087.4.9.1472142115786; __utmc=118165087; __utmz=118165087.1472142077.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); S=cloudsearch=2stCm8aR5e1o2UZA47qJpA");
		httpPost.addHeader("Cookie", getAllCookieStr());

		ComLogUtil.info("payload:" + payload);
		
		//only english
		//httppost.setEntity(new StringEntity("7|3|13|https://groups.google.com/forum/|431EDF28DA7DB0F110D897C9D8624A20|5g|ADn_d4JXPlUFyntUkMkgZfIAHUJ18cKf1g:1472022214513|_|getMatchingMessages|5n|i|I|1u|5h|乘客|my-langtest|1|2|3|4|5|6|6|7|8|9|9|10|11|12|8|13|13|0|0|0|20|10|5|0|"));
		/**
		* support all languages
		* The invert last 5th param is the start index of res. e.g:
		* 0|20|10|5|0| -> start from result 0.
		* 20|20|10|5|0| -> start from result 20
		*/
		httpPost.setEntity(new StringEntity(payload, encode));
		
		response = httpclient.execute(httpPost);
		int statusCode = response.getStatusLine().getStatusCode();
		ComLogUtil.info("statusCode:" + response.getStatusLine().getStatusCode());
		if(statusCode != 200) {
			ComLogUtil.error("query failed!!!!");
		}
		
		entity = response.getEntity();
		
		resStr = decodeGzipStream(entity.getContent());
		
		org.apache.http.Header contentType = entity.getContentType();
		ComLogUtil.info(new StringBuilder("ContentEncoding:").append(entity.getContentEncoding())
							.append(", ContentType:").append(contentType.getName()).append("  ").append(contentType.getValue())
							.append(", Content:\n").append(resStr)
		);
		httpPost.releaseConnection();
		
		resList = getResList(resStr);
		
		//if we still have next page; we only query the first  pageMax*10 results.
		if(resList.size() >= pageMax && currentPage < 10) {
			resList.addAll(searchGGroupOnce(queryStr, pageMax, ++currentPage));
		}
		System.out.println("-----------------------------------------------------------");
		return resList;
	}
 
	private void testSystemIn() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(
                System.in));
        String hello = reader.readLine();
        System.out.println(hello);
    }
    /**
	 * a httpPost demo
	 */
	private void simplePostDemo() throws Exception {
		ComLogUtil.info("");
        HttpPost httpPost = new HttpPost("https://accounts.google.com/signin/challenge/sl/password");
        httpPost.addHeader("Host", "accounts.google.com");
        httpPost.addHeader("Connection", "keep-alive");
        httpPost.addHeader("Cache-Control", "max-age=0");
        httpPost.addHeader("Origin", "https://accounts.google.com");
        httpPost.addHeader("Upgrade-Insecure-Requests", "1");
        httpPost.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpPost.addHeader("Content-Type", "application/x-www-form-urlencoded");
        //httpPost.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpPost.addHeader("X-Chrome-Connected", "id=113692410776860057358,mode=0,enable_account_consistency=false");
        httpPost.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpPost.addHeader("Referer", "https://accounts.google.com/ServiceLogin?hl=zh-CN&passive=true&continue=https://www.google.com.au/%3Fgws_rd%3Dssl");
        httpPost.addHeader("Accept-Encoding", "gzip, deflate, br");
        httpPost.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        httpPost.addHeader("Cookie", "GALX=kB-FTTVGXv4; GAPS=1:wANhYXlwm8gGippFoXVinBDYBr3EJw:kRRuQfhO96snM9Mw");


        
        httpPost.setEntity(new StringEntity("Page=PasswordSeparationSignIn&GALX=kB-FTTVGXv4&gxf=AFoagUU91lJL-CydLEI9G8TZDDpVFC8JLg%3A1472134824130&continue=https%3A%2F%2Fwww.google.com.au%2F%3Fgws_rd%3Dssl&hl=zh-CN&ProfileInformation=APMTqumJlppzxwHBjVRpJhWNzgdTD5pHtRu2X693KZ6au6q4q7bxfg0esjjSsShiDct8lENm272As9hgsk6fsOBEJyfkm8jFkMi0Uh00f6wiNhrv5Q-bfIMY7LxaehfuMKnwjjBi5L-L&_utf8=%E2%98%83&bgresponse=%21sLOls5JCgC5o3sAh-AVEmdkgTbmJ6P4CAAAAW1IAAAALmQFnQNV9RESWbSxWBD-A-FbN-f3OunaAGTOSv-B5MSXGZ7X8V-l2-4c2pqSUk-wOO37xrnsKo9-C8sOd4W4ElWwULSksk3fM2PiQs_QtfjvvcL6XyHSBFZAwUGw_A0kQ_UeV0wrq6x4A2UeHAjylgJaeeH3LkRQdKOvSn1MJbhpJnGbITNUGh0M_wEFlddZni8qnh_84gO6NJG4IG11svFYmtSJ14ryGB8hEAef3LuKToyRBUrcNtZh2WEBuwmIFXWBJp0byDc0w-IZGcOhqylPXu2e98Eoy8jDnZ3KnGfzC1-WMzAGFewbda78sg1rFIkO2gneR2yXimkbCtXS2D-W6i7h26alunNMTb69ph91DYxxX0ZHOuy_Oafsev8pLho3bHYieL08rCpdayAqeNZHn9bDgLSceX2JDyacWMukR3n4lJCinaxWgDUu9HbCaEZzAmkdoJawhy1iprR1JzkhyAlazmzE_Iac&pstMsg=1&dnConn=&checkConnection=youtube%3A759%3A1&checkedDomains=youtube&identifiertoken=&identifiertoken_audio=&identifier-captcha-input=&Email=yingdachu%40gmail.com&Passwd=PASSW0RD&PersistentCookie=yes&rmShown=1"));
    	
        HttpResponse response = httpclient.execute(httpPost);
        HttpEntity entity = response.getEntity();
        
        
        org.apache.http.Header[] allHeaders = response.getAllHeaders();
        ComLogUtil.printArr(allHeaders, "");
        
        String html = getContentStr(entity);
        httpPost.releaseConnection();
        ComLogUtil.info("html:\n");
        System.out.println(html);
        printAllCookie("Cookie:");
	}
	
	/**
	 * a httpGet demo
   	 */
	private void simpleGetDemo() throws Exception {
		ComLogUtil.info("");
        HttpGet httpGet = new HttpGet("https://www.google.com.au/");
        
        httpGet.addHeader("GET https", "//www.google.com.au/ HTTP/1.1");
        httpGet.addHeader("Host", "www.google.com.au");
        httpGet.addHeader("Connection", "keep-alive");
        httpGet.addHeader("Upgrade-Insecure-Requests", "1");
        httpGet.addHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
        httpGet.addHeader("X-Client-Data", "CJa2yQEIo7bJAQjBtskBCPGcygE=");
        httpGet.addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
        httpGet.addHeader("Accept-Encoding", "gzip, deflate, sdch, br");
        httpGet.addHeader("Accept-Language", "zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4");
        //httpGet.addHeader("Cookie", getAllCookieStr());
        //httpGet.addHeader("Cookie", "SID=rgNe3TO_0cXzCQfjHf65gQuZ3p-dhoh5XLjm0L5882vorKZO7_L1VY8GuzW68Zrg7SiMyw.; HSID=A2w-5VSts6civ-ai5; SSID=ADPcezOFZhC42oc0p; APISID=NDZ7fzEdVacxdGF7/ALStwOeAn5OPuE002; SAPISID=MA2SrmWOb_p9I3ae/AOS_NcZ7uFYPpe7fR; NID=85=vwB6txon9YznTV00ENikb92lkmVin9eMLArbb16x_c_hcCKh8gk-aCLMYvnH3WMEkhUJo1CNZHiX1mS_yCGYsFdyn9R7igFN7hgnsSSdYqAfAIeF2F-R8M3uauQ0QzlFjTAWpm3oXvO17RJplP38QnxSs5on9ScXxrwfrgoUDWzL1tzOtjAMHcbJ9-0WwgHSU-INdWvSf1o");
        
        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
       
        String html = getContentStr(entity);
        httpGet.releaseConnection();
        ComLogUtil.info("html:\n");
        System.out.println(html);
        printAllCookie("step0Cookie:");
	}
	
}